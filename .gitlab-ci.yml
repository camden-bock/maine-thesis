variables:
  # The name for your generic package
  PACKAGE_NAME: maine-thesis
  # Use a minimal image with curl for the publish job
  CURL_IMAGE: curlimages/curl:latest

stages:
  - build
  - publish
  - release

build_assets:
  stage: build
  image: texlive/texlive:latest
  script:
    - make gitlab
  artifacts:
    # Save the entire output directory as an artifact
    paths:
      - build/distrib/gl/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

publish:
  stage: publish
  image: $CURL_IMAGE
  needs:
    # This job needs the artifacts from the build job
    - job: build_assets
      artifacts: true
  script:
    - echo "Uploading all files from build/distrib/gl/ to the package registry..."
    # Use 'find' to locate all files in the artifact directory and its subdirectories
    - |
      find build/distrib/gl -type f | while read -r file; do
        filename=$(basename "$file")

        # 1. Upload to the numbered version (e.g., v1.2.3)
        echo "-> Uploading ${filename} to version ${CI_COMMIT_TAG}"
        curl --fail --show-error --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
             --upload-file "${file}" \
             "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${CI_COMMIT_TAG}/${filename}"

        # 2. Upload the same file to the 'latest' version, overwriting any previous 'latest' file
        echo "-> Uploading ${filename} to version 'latest'"
        curl --fail --show-error --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
             --upload-file "${file}" \
             "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/latest/${filename}"
      done
  rules:
    - if: $CI_COMMIT_TAG

create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - publish
  variables:
    # The base URL is still correct
    PACKAGE_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${CI_COMMIT_TAG}"
  script:
    - |
      # Use a more robust `sed` command to strip the leading 'v'
      RELEASE_VERSION=$(echo "$CI_COMMIT_TAG" | sed 's/^v//')
      echo "Original tag: $CI_COMMIT_TAG, Cleaned version: $RELEASE_VERSION"
  artifacts:
    reports:
      # 2. Expose the .env file as a dotenv report.
      #    This makes RELEASE_VERSION available to the 'release' keyword below.
      dotenv: release.env
  release:
    name: 'Release $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: "Assets for this release are available in the package registry."
    assets:
      links:
        - name: 'maine-thesis.cls'
          url: '${PACKAGE_URL}/maine-thesis.cls'
        - name: 'maine-thesis.tds.zip'
          url: '${PACKAGE_URL}/maine-thesis.tds.zip'
        - name: 'maine-thesis-template.zip'
          url: '${PACKAGE_URL}/maine-thesis-template.zip'
        # 3. Use the new, sanitized $RELEASE_VERSION variable here.
        - name: 'maine-thesis-${RELEASE_VERSION}.zip'
          url: '${PACKAGE_URL}/maine-thesis-${RELEASE_VERSION}.zip'
        - name: 'maine-thesis.dtx'
          url: '${PACKAGE_URL}/maine-thesis.dtx'
        - name: 'maine-thesis.pdf'
          url: '${PACKAGE_URL}/maine-thesis.pdf'
  rules:
    - if: $CI_COMMIT_TAG